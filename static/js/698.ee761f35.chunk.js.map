{"version":3,"file":"static/js/698.ee761f35.chunk.js","mappings":"oLAyBA,EAvBkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACXC,EAAgED,EAAhEC,OAAQC,EAAwDF,EAAxDE,SAAUC,EAA8CH,EAA9CG,eAAgBC,EAA8BJ,EAA9BI,aAAcC,EAAgBL,EAAhBK,YAClDC,EAAQC,KAAKC,MAAqB,GAAfJ,GACnBK,EAAgBR,EAAOS,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAT,IACjCC,EAAaC,EAKjB,OAJIT,IACFQ,EAAU,yCAAqCR,KAI/C,4BACE,gBAAKU,IAAKF,EAAYG,IAAI,iBAC1B,4BACE,wBAAKb,KACL,yBAAG,eAAaG,EAAM,SACtB,wBAAI,cACJ,uBAAIJ,KACJ,wBAAI,YACJ,uBAAIO,EAAcQ,KAAK,aAI9B,E,kCCJD,EAfkB,SAAC,GAAkB,IAAD,IAAfC,EAAe,EAAfA,SACnB,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAK3D,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaX,GAAUY,MAAK,SAAA9B,GAAK,OAAIqB,EAAarB,EAAjB,GAClC,GAAE,CAACkB,KAEF,iCACE,SAAC,EAAAa,QAAD,CAASC,GAAIR,EAAoBS,QAAjC,SAA0C,SACzCb,IAAa,SAAC,EAAD,CAAWpB,MAAOoB,MAGrC,ECKD,EAnBsB,WACpB,IAAQF,GAAagB,EAAAA,EAAAA,MAAbhB,SAER,OACE,2BACE,8BACE,4BACE,SAAC,EAAD,CAAWA,SAAUA,EAArB,SAA+B,6BAC/B,0BACE,SAAC,EAAAa,QAAD,CAASC,GAAG,UAAZ,SAAsB,eAExB,SAAC,EAAAG,SAAD,CAAUC,UAAU,yBAAK,kBAAzB,UACE,SAAC,KAAD,YAMX,C,qICvBKC,EAAU,mCACVC,EAAW,8BAEJC,EAAiB,mCAAG,6FACzBC,EADyB,UAChBF,EADgB,mCACmBD,EADnB,oBAERI,MAAMD,GAFE,cAEzBE,EAFyB,gBAGlBA,EAASC,OAHS,mFAAH,qDAMjBd,EAAY,mCAAG,WAAMe,GAAN,gFACpBJ,EADoB,UACXF,EADW,mBACQM,EADR,oBACsBP,EADtB,oBAEHI,MAAMD,GAFH,cAEpBE,EAFoB,gBAGbA,EAASC,OAHI,mFAAH,sDAMZE,EAAiB,mCAAG,WAAMD,GAAN,gFACvBJ,EADuB,UACdF,EADc,mBACKM,EADL,2CAC0CP,EAD1C,oBAEJI,MAAMD,GAFF,cAErBE,EAFqB,gBAGdA,EAASC,OAHK,mFAAH,qD","sources":["components/MovieCard/MovieCard.jsx","components/MovieInfo/MovieInfo.jsx","pages/MoviesDetails.jsx","utils/api.js"],"sourcesContent":["import noPoster from '../../images/noPhoto.png';\n\nconst MovieCard = ({ movie }) => {\n  const { genres, overview, original_title, vote_average, poster_path } = movie;\n  const score = Math.round(vote_average * 10);\n  const genresOfMovie = genres.map(item => item.name);\n  let posterPath = noPoster;\n  if (poster_path) {\n    posterPath = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  }\n\n  return (\n    <div>\n      <img src={posterPath} alt=\"poster-film\" />\n      <div>\n        <h1>{original_title}</h1>\n        <p>User Score: {score}% </p>\n        <h2>Overview</h2>\n        <p>{overview}</p>\n        <h2>Genres</h2>\n        <p>{genresOfMovie.join(', ')}</p>\n      </div>\n    </div>\n  );\n};\nexport default MovieCard;\n","import MovieCard from 'components/MovieCard/MovieCard';\nimport { useEffect, useRef, useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { getMovieById } from 'utils/api';\n\nconst MovieInfo = ({ moviesId }) => {\n  const [movieById, setMovieById] = useState(null);\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    getMovieById(moviesId).then(movie => setMovieById(movie));\n  }, [moviesId]);\n  return (\n    <>\n      <NavLink to={backLinkLocationRef.current}>Back</NavLink>\n      {movieById && <MovieCard movie={movieById}></MovieCard>}\n    </>\n  );\n};\nexport default MovieInfo;\n","import MovieInfo from 'components/MovieInfo/MovieInfo';\nimport { Suspense } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\n\nconst MoviesDetails = () => {\n  const { moviesId } = useParams();\n\n  return (\n    <main>\n      <section>\n        <div>\n          <MovieInfo moviesId={moviesId}>Information about movie</MovieInfo>\n          <div>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </div>\n          <Suspense fallback={<div>Is loading...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      </section>\n    </main>\n  );\n};\nexport default MoviesDetails;\n","const API_KEY = 'f8717161caaf1418c951ed37d4ef3a4b';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nexport const getTrendingMovies = async () => {\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getMovieById = async id => {\n  const URL = `${BASE_URL}3/movie/${id}?api_key=${API_KEY}&page=1`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getReviewsOfMovie = async id => {\n    const URL = `${BASE_URL}3/movie/${id}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n      const response = await fetch(URL);\n      return await response.json();\n}"],"names":["movie","genres","overview","original_title","vote_average","poster_path","score","Math","round","genresOfMovie","map","item","name","posterPath","noPoster","src","alt","join","moviesId","useState","movieById","setMovieById","location","useLocation","backLinkLocationRef","useRef","state","from","useEffect","getMovieById","then","NavLink","to","current","useParams","Suspense","fallback","API_KEY","BASE_URL","getTrendingMovies","URL","fetch","response","json","id","getReviewsOfMovie"],"sourceRoot":""}